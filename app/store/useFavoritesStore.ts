'use client';

import { create } from 'zustand';

type Store = {
  favorites: string[];
  toggleFavorite: (id: string) => void;
  isFavorite: (id: string) => boolean;
};

/* ---------- helpers ---------- */

// –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ Telegram WebApp
function getUserId(): string | null {
  if (typeof window === 'undefined' || !window.Telegram?.WebApp) {
    console.warn('‚ùå Telegram WebApp –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    return null;
  }

  const user = window.Telegram.WebApp.initDataUnsafe?.user;
  if (!user || !user.id) {
    console.warn('‚ùå –ù–µ—Ç user.id –∏–∑ Telegram');
    return null;
  }

  const id = String(user.id);
  console.log('‚úÖ Telegram user_id =', id);
  return id;
}

// ---------- –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ----------
async function apiSave(list: string[]) {
  const uid = getUserId();
  console.log('üíæ [apiSave] uid =', uid, '‚Üí', list);

  if (!uid) {
    console.warn('‚ö†Ô∏è user_id –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Üí —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage');
    localStorage.setItem('my-favorites', JSON.stringify(list));
    return;
  }

  try {
    const response = await fetch('/api/favorites', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ user_id: uid, list }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå [apiSave] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Redis:', response.status, errorText);
    } else {
      console.log('‚úÖ [apiSave] –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Redis');
    }
  } catch (err) {
    console.error('üî• [apiSave] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', err);
  }
}

// ---------- –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ----------
async function apiLoad(): Promise<string[]> {
  const uid = getUserId();
  console.log('üîç [apiLoad] uid =', uid);

  if (!uid) {
    console.warn('‚ö†Ô∏è user_id –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Üí —á–∏—Ç–∞–µ–º –∏–∑ localStorage');
    const raw = localStorage.getItem('my-favorites');
    return raw ? JSON.parse(raw) : [];
  }

  try {
    const r = await fetch('/api/favorites?user_id=' + uid);
    if (!r.ok) {
      const error = await r.text();
      console.error('‚ùå [apiLoad] –û—à–∏–±–∫–∞ –æ—Ç API:', r.status, error);
      return [];
    }

    const json = await r.json();
    console.log('üì¶ [apiLoad] result =', json);
    return json;
  } catch (err) {
    console.error('üî• [apiLoad] –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞:', err);
    return [];
  }
}

/* ---------- Zustand‚Äëstore ---------- */

export const useFavoritesStore = create<Store>((set, get) => ({
  favorites: [],

  toggleFavorite: async (id) => {
    const curr = get().favorites;
    const updated = curr.includes(id)
      ? curr.filter(i => i !== id)
      : [...curr, id];

    set({ favorites: updated });
    await apiSave(updated);
    window.dispatchEvent(new Event('favorites-updated'));
  },

  isFavorite: (id) => get().favorites.includes(id),
}));

/* ---------- –î–ª—è LayoutInit ---------- */

export async function loadFavoritesFromApi() {
  const list = await apiLoad();
  return { favorites: list };
}
